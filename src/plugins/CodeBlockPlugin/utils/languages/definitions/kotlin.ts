import { type LanguageDefinition, TokenType } from '../../../types';

export const kotlinDefinition: LanguageDefinition = {
  name: 'kotlin',
  patterns: {
    [TokenType.Comment]: /^\/\/.*$|^\/\*[\s\S]*?\*\//,
    [TokenType.String]: /^"(?:[^"\\]|\\.)*"|^'''[\s\S]*?'''/,
    [TokenType.Number]: /^\b(?:0x[0-9a-fA-F]+|\d+(?:\.\d+)?(?:[eE][+-]?\d+)?[fFL]?)\b/,
    [TokenType.Function]: /^\b[a-zA-Z_]\w*(?=\s*\()/,
    [TokenType.Type]:
      /^\b(?:Byte|Short|Int|Long|Float|Double|Boolean|Char|String|Any|Unit|Nothing)\b/,
    [TokenType.Decorator]: /^@\w+/,
    [TokenType.Operator]: /^(?:->|::|\?\.|!!|\+\+|--|&&|\|\||[+\-*/%&|^<>!=]=?)/,
    [TokenType.Punctuation]: /^[{}[\]();,.]/,
  },
  keywords: [
    'abstract',
    'actual',
    'annotation',
    'as',
    'break',
    'by',
    'catch',
    'class',
    'companion',
    'const',
    'constructor',
    'continue',
    'crossinline',
    'data',
    'delegate',
    'do',
    'dynamic',
    'else',
    'enum',
    'expect',
    'external',
    'false',
    'field',
    'final',
    'finally',
    'for',
    'fun',
    'get',
    'if',
    'import',
    'in',
    'infix',
    'init',
    'inline',
    'inner',
    'interface',
    'internal',
    'is',
    'lateinit',
    'noinline',
    'null',
    'object',
    'open',
    'operator',
    'out',
    'override',
    'package',
    'private',
    'protected',
    'public',
    'reified',
    'return',
    'sealed',
    'set',
    'super',
    'suspend',
    'tailrec',
    'this',
    'throw',
    'true',
    'try',
    'typealias',
    'val',
    'var',
    'vararg',
    'when',
    'where',
    'while',
  ],
};
