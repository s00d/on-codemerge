import { type LanguageDefinition, TokenType } from '../../../types';

export const haskellDefinition: LanguageDefinition = {
  name: 'haskell',
  patterns: {
    [TokenType.Comment]: /^--.*$|^{-[\s\S]*?-}/,
    [TokenType.String]: /^"(?:[^"\\]|\\.)*"/,
    [TokenType.Number]: /^\b\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\b/,
    [TokenType.Function]: /^\b[a-z_]\w*(?=\s*::)/,
    [TokenType.Type]: /^\b(?:Int|Integer|Float|Double|Bool|Char|String|IO)\b/,
    [TokenType.Operator]: /^(?:->|<-|=>|::|[+\-*/%&|^<>!=]=?)/,
    [TokenType.Punctuation]: /^[{}[\]();,.]/,
  },
  keywords: [
    'as',
    'case',
    'class',
    'data',
    'default',
    'deriving',
    'do',
    'else',
    'family',
    'forall',
    'foreign',
    'hiding',
    'if',
    'import',
    'in',
    'infix',
    'infixl',
    'infixr',
    'instance',
    'let',
    'module',
    'newtype',
    'of',
    'qualified',
    'then',
    'type',
    'where',
  ],
};
