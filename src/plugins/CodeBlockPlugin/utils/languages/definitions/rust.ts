import { type LanguageDefinition, TokenType } from '../../../types';

export const rustDefinition: LanguageDefinition = {
  name: 'rust',
  patterns: {
    [TokenType.Comment]: /^\/\/.*$|^\/\*[\s\S]*?\*\//,
    [TokenType.String]: /^"(?:\\.|[^"\\])*"|^'(?:\\.|[^'\\])*'/,
    [TokenType.Number]: /^\b(?:0x[0-9a-fA-F]+|0o[0-7]+|0b[01]+|\d+(?:\.\d+)?(?:[eE][+-]?\d+)?)\b/,
    [TokenType.Function]: /^\b[a-zA-Z_]\w*(?=\s*[({])/,
    [TokenType.Type]:
      /^\b(?:i8|i16|i32|i64|i128|isize|u8|u16|u32|u64|u128|usize|f32|f64|bool|char|str|String)\b/,
    [TokenType.Decorator]: /^#\[(?:[^\]\\]|\\.)*\]/,
    [TokenType.Lifetime]: /^'[a-zA-Z_]\w*/,
    [TokenType.Operator]:
      /^(?:->|=>|\+=|-=|\*=|\/=|%=|&=|\|=|\^=|<<=|>>=|=|\+|-|\*|\/|%|&|\||!|<|>|<=|>=|==|!=)/,
    [TokenType.Punctuation]: /^[{}[\]();,.]/,
  },
  keywords: [
    'as',
    'async',
    'await',
    'break',
    'const',
    'continue',
    'crate',
    'dyn',
    'else',
    'enum',
    'extern',
    'false',
    'fn',
    'for',
    'if',
    'impl',
    'in',
    'let',
    'loop',
    'match',
    'mod',
    'move',
    'mut',
    'pub',
    'ref',
    'return',
    'self',
    'Self',
    'static',
    'struct',
    'super',
    'trait',
    'true',
    'type',
    'unsafe',
    'use',
    'where',
    'while',
    'yield',
  ],
};
