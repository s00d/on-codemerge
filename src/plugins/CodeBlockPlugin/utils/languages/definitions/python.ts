import { type LanguageDefinition, TokenType } from '../../../types';

export const pythonDefinition: LanguageDefinition = {
  name: 'python',
  patterns: {
    [TokenType.Comment]: /^#.*/,
    [TokenType.String]: /^(?:'''[\s\S]*?'''|"""[\s\S]*?"""|'(?:\\.|[^'])*'|"(?:\\.|[^"])*")/,
    [TokenType.Number]: /^\b(?:0[xX][0-9a-fA-F]+|\d*\.?\d+(?:[eE][+-]?\d+)?)\b/,
    [TokenType.Function]: /^\b[a-zA-Z_]\w*(?=\s*\()/,
    [TokenType.Decorator]: /^@[\w.]+/,
    [TokenType.Operator]:
      /^(?:->|\+=|-=|\*=|\/=|%=|@=|&=|\|=|\^=|>>=|<<=|\*\*=|\/\/=|==|!=|>=|<=|>>|<<|\*\*|\/\/|[+\-*/%@|^&<>=~])/,
    [TokenType.Punctuation]: /^[{}[\]();,.]/,
    [TokenType.Variable]: /^[a-zA-Z_]\w*/,
  },
  keywords: [
    'and',
    'as',
    'assert',
    'async',
    'await',
    'break',
    'class',
    'continue',
    'def',
    'del',
    'elif',
    'else',
    'except',
    'finally',
    'for',
    'from',
    'global',
    'if',
    'import',
    'in',
    'is',
    'lambda',
    'nonlocal',
    'not',
    'or',
    'pass',
    'raise',
    'return',
    'try',
    'while',
    'with',
    'yield',
  ],
};
