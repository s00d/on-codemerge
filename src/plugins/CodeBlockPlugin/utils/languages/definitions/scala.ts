import { type LanguageDefinition, TokenType } from '../../../types';

export const scalaDefinition: LanguageDefinition = {
  name: 'scala',
  patterns: {
    [TokenType.Comment]: /^\/\/.*$|^\/\*[\s\S]*?\*\//,
    [TokenType.String]: /^"(?:[^"\\]|\\.)*"|^'''[\s\S]*?'''/,
    [TokenType.Number]: /^\b(?:0x[0-9a-fA-F]+|\d+(?:\.\d+)?(?:[eE][+-]?\d+)?[fFL]?)\b/,
    [TokenType.Function]: /^\b[a-zA-Z_]\w*(?=\s*[({])/,
    [TokenType.Type]:
      /^\b(?:Boolean|Byte|Short|Int|Long|Float|Double|Char|String|Unit|Null|Nothing|Any|AnyRef|AnyVal)\b/,
    [TokenType.Decorator]: /^@\w+/,
    [TokenType.Operator]: /^(?:=>|<-|->|#|@|::|[+\-*/%&|^<>!=]=?)/,
    [TokenType.Punctuation]: /^[{}[\]();,.]/,
  },
  keywords: [
    'abstract',
    'case',
    'catch',
    'class',
    'def',
    'do',
    'else',
    'extends',
    'false',
    'final',
    'finally',
    'for',
    'forSome',
    'if',
    'implicit',
    'import',
    'lazy',
    'match',
    'new',
    'null',
    'object',
    'override',
    'package',
    'private',
    'protected',
    'return',
    'sealed',
    'super',
    'this',
    'throw',
    'trait',
    'try',
    'true',
    'type',
    'val',
    'var',
    'while',
    'with',
    'yield',
  ],
};
