import { type LanguageDefinition, TokenType } from '../../../types';

export const csharpDefinition: LanguageDefinition = {
  name: 'csharp',
  patterns: {
    [TokenType.Comment]: /^\/\/.*$|^\/\*[\s\S]*?\*\//,
    [TokenType.String]: /^@"(?:[^"]|"")*"|^"(?:\\.|[^"\\])*"/,
    [TokenType.Number]: /^\b(?:0x[0-9a-fA-F]+|\d+(?:\.\d+)?(?:[eE][+-]?\d+)?[dDfFmM]?)\b/,
    [TokenType.Function]: /^\b[a-zA-Z_]\w*(?=\s*\()/,
    [TokenType.Type]:
      /^\b(?:bool|byte|sbyte|char|decimal|double|float|int|uint|long|ulong|short|ushort|object|string|void|dynamic|var)\b/,
    [TokenType.Decorator]: /^(?:\[(?:[^\[\]\\]|\\.)*\])/,
    [TokenType.Operator]: /^(?:=>|\?\?=|\+\+|--|&&|\|\||[+\-*\/%&|^<>!=]=?)/,
    [TokenType.Punctuation]: /^[{}[\]();,.]/,
  },
  keywords: [
    'abstract',
    'as',
    'base',
    'break',
    'case',
    'catch',
    'checked',
    'class',
    'const',
    'continue',
    'default',
    'delegate',
    'do',
    'else',
    'enum',
    'event',
    'explicit',
    'extern',
    'finally',
    'fixed',
    'for',
    'foreach',
    'goto',
    'if',
    'implicit',
    'in',
    'interface',
    'internal',
    'is',
    'lock',
    'namespace',
    'new',
    'null',
    'operator',
    'out',
    'override',
    'params',
    'private',
    'protected',
    'public',
    'readonly',
    'ref',
    'return',
    'sealed',
    'sizeof',
    'stackalloc',
    'static',
    'struct',
    'switch',
    'this',
    'throw',
    'try',
    'typeof',
    'unchecked',
    'unsafe',
    'using',
    'virtual',
    'volatile',
    'while',
    'add',
    'alias',
    'ascending',
    'async',
    'await',
    'by',
    'descending',
    'equals',
    'from',
    'get',
    'global',
    'group',
    'into',
    'join',
    'let',
    'nameof',
    'orderby',
    'partial',
    'remove',
    'select',
    'set',
    'value',
    'var',
    'when',
    'where',
    'yield',
  ],
};
