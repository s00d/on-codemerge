import './style.scss';
import './public.scss';

import type { Plugin } from '../../core/Plugin';
import type { HTMLEditor } from '../../core/HTMLEditor';
import { BlockContextMenu } from './components/BlockContextMenu';
import { BlockCommand } from './commands/BlockCommand';
import { MergeBlocksCommand } from './commands/MergeBlocksCommand';
import { createToolbarButton } from '../ToolbarPlugin/utils';
import { blockIcon } from '../../icons';
import { Resizer } from '../../utils/Resizer';

export class BlockPlugin implements Plugin {
  name = 'block';
  hotkeys = [
    { keys: 'Ctrl+Alt+N', description: 'Insert block', command: 'block', icon: 'üß±' },
    { keys: 'Ctrl+Alt+T', description: 'Insert text block', command: 'block-text', icon: 'üìù' },
    { keys: 'Ctrl+Alt+C', description: 'Insert container', command: 'block-container', icon: 'üì¶' },
  ];
  private editor: HTMLEditor | null = null;
  private contextMenu: BlockContextMenu | null = null;
  private activeBlock: HTMLElement | null = null;
  private currentResizer: Resizer | null = null;
  private isProcessing = false;

  initialize(editor: HTMLEditor): void {
    this.contextMenu = new BlockContextMenu(editor);
    this.editor = editor;
    this.addToolbarButton();
    this.setupBlockEvents();
    this.setupKeyboardEvents();

    this.editor.on('block', () => {
      this.insertBlock();
    });
    this.editor.on('block-text', () => {
      this.insertTextBlock();
    });
    this.editor.on('block-container', () => {
      this.insertContainerBlock();
    });
  }

  private addToolbarButton(): void {
    const toolbar = this.editor?.getToolbar();
    if (!toolbar) return;

    const button = createToolbarButton({
      icon: blockIcon,
      title: this.editor?.t('Insert Block') || 'Insert Block',
      onClick: () => this.insertBlock(),
    });
    toolbar.appendChild(button);
  }

  private setupBlockEvents(): void {
    if (!this.editor) return;
    const container = this.editor.getContainer();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    this.handleBlockClick = this.handleBlockClick.bind(this);
    this.handleContextMenu = this.handleContextMenu.bind(this);
    this.handleBlockKeydown = this.handleBlockKeydown.bind(this);
    this.handleBlockBlur = this.handleBlockBlur.bind(this);
    this.handleBlockFocus = this.handleBlockFocus.bind(this);
    this.handleBlockMouseDown = this.handleBlockMouseDown.bind(this);

    container.addEventListener('click', this.handleBlockClick);
    container.addEventListener('contextmenu', this.handleContextMenu);
    container.addEventListener('keydown', this.handleBlockKeydown);
    container.addEventListener('blur', this.handleBlockBlur, true);
    container.addEventListener('focus', this.handleBlockFocus, true);
    container.addEventListener('mousedown', this.handleBlockMouseDown);
  }

  private setupKeyboardEvents(): void {
    if (!this.editor) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
    this.editor.on('keydown', (e: KeyboardEvent) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        const target = e.target as HTMLElement;
        const block = target.closest('.editor-block');

        if (block && target.classList.contains('block-content')) {
          e.preventDefault();
          this.createNewBlockAfter(block as HTMLElement);
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ Tab –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
      if (e.key === 'Tab') {
        const target = e.target as HTMLElement;
        const block = target.closest('.editor-block');

        if (block && target.classList.contains('block-content')) {
          e.preventDefault();

          if (e.shiftKey) {
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –±–ª–æ–∫—É
            const prevBlock = block.previousElementSibling as HTMLElement;
            if (prevBlock && prevBlock.classList.contains('editor-block')) {
              const prevContent = prevBlock.querySelector('.block-content') as HTMLElement;
              if (prevContent && prevContent.contentEditable === 'true') {
                prevContent.focus();
              }
            }
          } else {
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
            const nextBlock = block.nextElementSibling as HTMLElement;
            if (nextBlock && nextBlock.classList.contains('editor-block')) {
              const nextContent = nextBlock.querySelector('.block-content') as HTMLElement;
              if (nextContent && nextContent.contentEditable === 'true') {
                nextContent.focus();
              }
            }
          }
        }
      }
    });
  }

  private handleBlockClick(e: MouseEvent): void {
    if (this.isProcessing) return;

    const block = (e.target as Element).closest('.editor-block');
    if (!block) {
      this.deactivateBlock();
      return;
    }

    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Ç–æ—Ç –∂–µ –±–ª–æ–∫, –ø—Ä–æ—Å—Ç–æ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (this.activeBlock === block) {
      const content = block.querySelector('.block-content') as HTMLElement;
      const blockType = block.getAttribute('data-block-type');

      // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω
      if (blockType === 'text' && content && content.contentEditable !== 'true') {
        content.contentEditable = 'true';
        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º content.focus() - –±—Ä–∞—É–∑–µ—Ä —Å–∞–º –ø–æ—Å—Ç–∞–≤–∏—Ç –∫—É—Ä—Å–æ—Ä
      }
      return;
    }

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫
    this.deactivateBlock();
    this.activateBlock(block as HTMLElement);

    // –°–æ–∑–¥–∞–µ–º Resizer —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
    if (block.getAttribute('data-block-type') === 'text') {
      this.createResizer(block as HTMLElement);
    }
  }

  private handleContextMenu(e: MouseEvent): void {
    const block = (e.target as Element).closest('.editor-block');
    if (block instanceof HTMLElement) {
      e.preventDefault();
      const mouseX = e.clientX + window.scrollX;
      const mouseY = e.clientY + window.scrollY;

      this.contextMenu?.show(block, mouseX, mouseY);
    }
  }

  private handleBlockKeydown(e: KeyboardEvent): void {
    const target = e.target as HTMLElement;
    const block = target.closest('.editor-block');

    if (!block) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Backspace –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –±–ª–æ–∫–æ–º
    if (e.key === 'Backspace' && target.classList.contains('block-content')) {
      const content = target.textContent || '';
      if (content.length === 0) {
        e.preventDefault();
        this.mergeWithPreviousBlock(block as HTMLElement);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Delete –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –±–ª–æ–∫–æ–º
    if (e.key === 'Delete' && target.classList.contains('block-content')) {
      const content = target.textContent || '';
      if (content.length === 0) {
        e.preventDefault();
        this.mergeWithNextBlock(block as HTMLElement);
      }
    }
  }

  private handleBlockBlur(e: FocusEvent): void {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —Å–æ—Å–µ–¥–Ω–∏–µ –±–ª–æ–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–æ–∫—É—Å —É—à–µ–ª –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    const container = this.editor?.getContainer();

    if (container && !container.contains(e.relatedTarget as Node)) {
      setTimeout(() => {
        this.autoMergeEmptyBlocks();
      }, 100);
    }
  }

  private handleBlockFocus(e: FocusEvent): void {
    const target = e.target as HTMLElement;
    const block = target.closest('.editor-block');

    if (block && target.classList.contains('block-content')) {
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–ª–æ–∫ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º, –Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
      if (this.activeBlock !== block) {
        this.deactivateBlock();
        this.activateBlock(block as HTMLElement);
      }
    }
  }

  private handleBlockMouseDown(e: MouseEvent): void {
    const target = e.target as HTMLElement;
    const block = target.closest('.editor-block');

    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞, –Ω–µ –≤–º–µ—à–∏–≤–∞–µ–º—Å—è –≤ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫—É—Ä—Å–æ—Ä–∞
    if (block && target.classList.contains('block-content') && target.contentEditable === 'true') {
      // –ü–æ–∑–≤–æ–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä—É —Å–∞–º–æ–º—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
      return;
    }
  }

  private activateBlock(block: HTMLElement): void {
    this.activeBlock = block;
    block.classList.add('active');

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ contentEditable —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    const content = block.querySelector('.block-content') as HTMLElement;
    if (content) {
      const blockType = block.getAttribute('data-block-type');

      if (blockType === 'text') {
        content.contentEditable = 'true';
        // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ - –±—Ä–∞—É–∑–µ—Ä —Å–∞–º –ø–æ—Å—Ç–∞–≤–∏—Ç –∫—É—Ä—Å–æ—Ä
      } else {
        content.contentEditable = 'false';
      }
    }
  }

  private deactivateBlock(): void {
    if (this.activeBlock) {
      this.activeBlock.classList.remove('active');
    }
    this.activeBlock = null;

    if (this.currentResizer) {
      this.currentResizer.destroy();
      this.currentResizer = null;
    }
  }

  private createResizer(block: HTMLElement): void {
    if (this.currentResizer) {
      this.currentResizer.destroy();
    }

    this.currentResizer = new Resizer(block, {
      handleSize: 8,
      handleColor: '#2563eb',
      onResizeStart: () => {
        this.editor?.disableObserver();
        this.isProcessing = true;
      },
      onResize: (width, height) => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –±–ª–æ–∫–∞
        block.style.width = width + 'px';
        block.style.height = height + 'px';
      },
      onResizeEnd: () => {
        this.editor?.enableObserver();
        this.isProcessing = false;
      },
    });
  }

  private insertBlock(): void {
    if (!this.editor) return;

    const command = new BlockCommand(this.editor);
    command.execute();
  }

  private insertTextBlock(): void {
    if (!this.editor) return;

    const command = new BlockCommand(this.editor);
    command.execute({ type: 'text' });
  }

  private insertContainerBlock(): void {
    if (!this.editor) return;

    const command = new BlockCommand(this.editor);
    command.execute({ type: 'container' });
  }

  private createNewBlockAfter(_block: HTMLElement): void {
    if (!this.editor) return;

    const command = new BlockCommand(this.editor);
    command.execute({ type: 'text' });

    // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ - –±—Ä–∞—É–∑–µ—Ä —Å–∞–º –ø–æ—Å—Ç–∞–≤–∏—Ç –∫—É—Ä—Å–æ—Ä
    // setTimeout(() => {
    //   const newBlock = block.nextElementSibling as HTMLElement;
    //   if (newBlock && newBlock.classList.contains('editor-block')) {
    //     const content = newBlock.querySelector('.block-content') as HTMLElement;
    //     if (content && content.contentEditable === 'true') {
    //       content.focus();
    //     }
    //   }
    // }, 10);
  }

  private mergeWithPreviousBlock(block: HTMLElement): void {
    const prevBlock = block.previousElementSibling as HTMLElement;
    if (prevBlock && prevBlock.classList.contains('editor-block')) {
      this.mergeBlocks([prevBlock, block]);
    }
  }

  private mergeWithNextBlock(block: HTMLElement): void {
    const nextBlock = block.nextElementSibling as HTMLElement;
    if (nextBlock && nextBlock.classList.contains('editor-block')) {
      this.mergeBlocks([block, nextBlock]);
    }
  }

  private mergeBlocks(blocks: HTMLElement[]): void {
    if (!this.editor || blocks.length < 2) return;

    const command = new MergeBlocksCommand(this.editor);
    command.setData({ blocks });
    command.execute();
  }

  private autoMergeEmptyBlocks(): void {
    if (!this.editor) return;

    const container = this.editor.getContainer();
    const blocks = container.querySelectorAll('.editor-block');

    for (const block of blocks) {
      const content = block.querySelector('.block-content') as HTMLElement;
      if (content && (!content.textContent || content.textContent.trim() === '')) {
        const nextBlock = block.nextElementSibling as HTMLElement;
        if (nextBlock && nextBlock.classList.contains('editor-block')) {
          this.mergeBlocks([block as HTMLElement, nextBlock]);
          break; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∑–∞ —Ä–∞–∑
        }
      }
    }
  }

  destroy(): void {
    if (this.editor) {
      // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
      const container = this.editor.getContainer();
      container.removeEventListener('click', this.handleBlockClick);
      container.removeEventListener('contextmenu', this.handleContextMenu);
      container.removeEventListener('keydown', this.handleBlockKeydown);
      container.removeEventListener('blur', this.handleBlockBlur, true);
      container.removeEventListener('focus', this.handleBlockFocus, true);
      container.removeEventListener('mousedown', this.handleBlockMouseDown);
    }

    this.editor?.off('block');
    this.editor?.off('block-text');
    this.editor?.off('block-container');

    if (this.currentResizer) {
      this.currentResizer.destroy();
      this.currentResizer = null;
    }

    if (this.contextMenu) {
      this.contextMenu.destroy();
      this.contextMenu = null;
    }

    this.deactivateBlock();
    this.editor = null;
    this.activeBlock = null;
  }
}
